plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.10.0"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = '6.19.0',
    appiumVersion = "8.1.1",
    junitVersion = "5.8.2",
    slf4jVersion = "1.7.32",
    jacksonVersion = "2.13.2.2"

allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
    report {
        version.set(allureVersion)
    }
}

dependencies {
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.rest-assured:rest-assured:4.3.1",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "io.appium:java-client:$appiumVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.19.0",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aspectj:aspectjweaver:1.9.5",
            "com.github.javafaker:javafaker:1.0.2")

    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").toString().isEmpty()) includeTags System.getProperty("tag").toString()
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}